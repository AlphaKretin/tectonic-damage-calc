{
  // Include parentheses around a sole arrow function parameter.
  "prettier.arrowParens": "always",

  // Puts the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
  "prettier.bracketSameLine": false,

  // Controls the printing of spaces inside object literals.
  "prettier.bracketSpacing": true,

  // Path to the prettier configuration file.
  "prettier.configPath": "",

  // A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter.
  "prettier.documentSelectors": [],

  // Control whether Prettier formats quoted code embedded in the file.
  "prettier.embeddedLanguageFormatting": "auto",

  // Controls whether Prettier is enabled or not. Reload required.
  "prettier.enable": true,

  // Enable debug logs for troubleshooting.
  "prettier.enableDebugLogs": false,

  // Specify the end of line used by prettier.
  "prettier.endOfLine": "lf",

  // Try prettier's [new ternary formatting](https://github.com/prettier/prettier/pull/13183) before it becomes the default behavior.
  "prettier.experimentalTernaries": false,

  // Specify the global [whitespace sensitivity](https://prettier.io/blog/2018/11/07/1.15.0.html#whitespace-sensitive-formatting) for HTML files.
  // Valid options:
  // - `css` - Respect the default value of CSS `display` property.
  // - `strict` - Whitespaces are considered sensitive.
  // - `ignore` - Whitespaces are considered insensitive.
  "prettier.htmlWhitespaceSensitivity": "css",

  // Path to a `.prettierignore` file.
  "prettier.ignorePath": ".prettierignore",

  // Prettier can insert a special `@format` marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the `@format` marker.
  "prettier.insertPragma": false,

  // Use single quotes instead of double quotes in JSX.
  "prettier.jsxSingleQuote": false,

  // Path to the `prettier` module, eg: `./node_modules/prettier`.
  "prettier.prettierPath": "",

  // Fit code within this line limit.
  "prettier.printWidth": 80,

  // (Markdown) wrap prose over multiple lines.
  "prettier.proseWrap": "preserve",

  // Change when properties in objects are quoted.
  // Valid options:
  // - `"as-needed"` - Only add quotes around object properties where required.
  // - `"consistent"` - If at least one property in an object requires quotes, quote all properties.
  // - `"preserve"` - Respect the input use of quotes in object properties.
  "prettier.quoteProps": "as-needed",

  // Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
  //
  // > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
  "prettier.requireConfig": false,

  // Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
  "prettier.requirePragma": false,

  // When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
  // > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
  "prettier.resolveGlobalModules": false,

  // Whether to add a semicolon at the end of every line.
  "prettier.semi": true,

  // Enforces single attribute per line in HTML, JSX, Vue and Angular.
  "prettier.singleAttributePerLine": false,

  // Use single instead of double quotes.
  "prettier.singleQuote": false,

  // Number of spaces it should use per tab.
  "prettier.tabWidth": 2,

  // Controls the printing of trailing commas wherever possible.
  // Valid options:
  // - `none` - No trailing commas
  // - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
  // - `all` - Trailing commas wherever possible (function arguments)
  "prettier.trailingComma": "es5",

  // Whether or not to take `.editorconfig` into account when parsing configuration. See the [`prettier.resolveConfig`](https://prettier.io/docs/en/api.html) docs for details.
  "prettier.useEditorConfig": true,

  // Indent lines with tabs.
  "prettier.useTabs": false,

  // Whether or not to indent the code inside `<script>` and `<style>` tags in Vue SFC files.
  "prettier.vueIndentScriptAndStyle": false,

  // This extension will process files in `node_modules`.
  "prettier.withNodeModules": false
}
